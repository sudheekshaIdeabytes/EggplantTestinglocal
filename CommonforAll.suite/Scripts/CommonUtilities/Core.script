(**  
Common - Handlers for the Common Functions used in test
@Version 1.0 15/05//2024
**) 


# to set the searchrectangle over the appliation
function ScreenPart Portion
	set screenPortions to {
		TopHalf: [[0,0],[1,.5]],
		BottomHalf: [[0,.5],[1,1]],
		LeftHalf: [[0,0],[.5,1]],
		RightHalf: [[.5,0],[1,1]],
		HorizontalMiddle: [[0,.25],[1,.75]],
		VerticalMiddle:[[.25,0],[.75,1]],
		TopLeftQuadrant:[[0,0],[.5,.5]],
		Header:[[0,.1],[1,.25]],
		TopRightQuadrant:[[.5,0],[1,.5]],
		BottomLeftQuadrant:[[0,.5],[.5,1]],
		BottomRightQuadrant:[[.5,.5],[1,1]],
		Center:[[.25,.25],[.75,.75]]
	}
	set multiplier to screenPortions.(Portion)		
	if (multiplier is empty) then throw "Parameter error", Portion && "is not a recognized screen portion."			
	return [the remoteScreenSize,the remotescreenSize] * multiplier
end ScreenPart

# setting text style
to setTextstyle txtStyle
	set properties to{
		Default: empty,
		GrayText:{contrastColor:[200,200,200], contrast:"On", contrastTolerance:"45"},
		YOFR:{IgnoreUnderscores:"Yes", IgnoreSpaces:"Yes", TextDifference:"2", IgnoreNewlines:"Yes"}
	}	
	Try
		set the TextStyle to properties.(txtStyle)
	Catch
		Log txtStyle && "is not a recognized Style Properties."
		set the TextStyle to empty
	End try
	return the TextStyle	
end setTextstyle


# to get connection Name of the SUT
to getConnectionName
	if (connectionInfo().Status is "Connected") then	put ConnectionInfo().Name into ConnectionName
	return ConnectionName
end getConnectionName

# to connect to a SUT
to ConnectSUT sutName
	connect sutName
	--Connect serverID:"192.168.1.171", portNum:3389, password:"Ideabytes", type:"RDP"
	wait 10
end ConnectSUT

# to disconnect to a SUT
to disConnectSUT sutName
	Disconnect sutName
	wait 5
end disConnectSUT

#to open run window
to openRunWindow 
	TypeText windowsKey, "r"
	wait 0.5	
	WaitFor universal pageWait, {text:"Type the name",SearchRectangle:"CommonUtilities/Config"().runwindow}
end openRunWindow


#to launch the URL on a desired browser
to launchURL browser, url, SR
	openRunWindow
	TypeText browser&&url&&"--start-Maximized", returnkey
	wait 0.8
	--TypeText windowskey, upArrow // maximize window on windows
	set the searchrectangle to "CommonUtilities/Config"().(SR)
end launchURL


# to launch enterprise application by passing required application path
to launchApplication path, validation, SR
	openRunWindow
	TypeText path, return
	wait 0.8
	TypeText windowskey, upArrow // maximize window on windows
	set the searchrectangle to "CommonUtilities/Config"().(SR)
	waitForValidation validation
end launchApplication


# to perform kill operation over application
to killApplicationOnSUT application
	TypeText windowsKey, "r"
	TypeText "taskkill /im"&&application&&"/t /f", return
end killApplicationOnSUT


# to perform click action and vadidate something over the screen
to navigate action, validation, offset, SR1:"default", SR2:"default"
	set the SearchRectangle to "CommonUtilities/Config"().(SR1)
	if (action is not empty) then
		if (offset is not empty) then 
			click scrollTo(action) + offset
		else
			click scrollTo(action)
		end if
		wait 1
	end if	
	if (validation is not empty) then
		waitForValidation validation, SR2
	end if	
end navigate


# to validate 
to waitForValidation validation, SR
	if (SR is not empty) then
		if file (suiteinfo().imagesFolder&"/"&validation&".png") exists or folder (suiteinfo().imagesFolder&"/"&validation) exists then
			WaitFor Universal pageWait, {image:validation,SearchRectangle: "CommonUtilities/Config"().(SR)}
		else
			WaitFor Universal pageWait, {text:validation, IgnoreNewlines:"Yes", IgnoreSpaces:"Yes", caseSensitive:On, SearchRectangle: "CommonUtilities/Config"().(SR)}
		end if
	else
		if file (suiteinfo().imagesFolder&"/"&validation&".png") exists or folder (suiteinfo().imagesFolder&"/"&validation) exists then
			WaitFor Universal pageWait, {image:validation}
		else
			WaitFor Universal pageWait, {text:validation, IgnoreNewlines:"Yes", IgnoreSpaces:"Yes", caseSensitive:On}
		end if
	end if
end waitForValidation


#to scroll to an element using image/text
to scrollto toFind
	if file (suiteinfo().imagesFolder&"/"&toFind&".png") exists or folder (suiteinfo().imagesFolder&"/"&toFind) exists then
		repeat until ImageFound(image:toFind, waitFor:0)
			scrollwheeldown 5
			wait 1
			if (repeatindex() > 10)
				LogError "Unable to find image..."&toFind
				exit repeat
			end if
		end repeat
	else
		repeat until ImageFound(text:toFind, waitFor:0, IgnoreNewlines:"Yes", IgnoreSpaces:"Yes",caseSensitive:On)
			scrollwheeldown 5
			wait 1
			if (repeatindex() > 10)
				LogError "Unable to find text..."&toFind
				exit repeat
			end if
		end repeat
	end if	
	return foundimagelocation()
end scrollto


# to perform double click operation over application
to doubleClickEvent action, validation, offset
	if (action is not empty) then
		if (offset is not empty) then 
			DoubleClick scrollTo(action) + offset
		else
			DoubleClick scrollTo(action)
		end if
		wait 1
	end if	
	if (validation is not empty) then
		waitForValidation validation
	end if	
end doubleClickEvent


# to perform right click operation over application
to rightClickEvent action, validation, offset
	if (action is not empty) then
		if (offset is not empty) then 
			RightClick scrollTo(action) + offset
		else
			RightClick scrollTo(action)
		end if
		wait 1
	end if	
	if (validation is not empty) then
		waitForValidation validation
	end if	
end rightClickEvent


# to perform click operation at a given location
to clickAtLocation Location
	Click Location
end clickAtLocation


# to perform type operation over application
to textEntry label, input, offset
	if (offset is not empty) then 		
		click scrollTo(label) + offset 
	else 
		click scrollTo(label)
	end if
	wait 0.5
	TypeText controlkey, "a"
	TypeText input, return
	wait 0.3
end textEntry


# to perform type operation over application
to textBoxEntry input, returnToNewLine:"Yes"
	TypeText controlkey, "a"
	if (returnToNewLine is not "Yes") then 
		TypeText input
	else 
		TypeText input, return
	end if
	wait 0.3
end textBoxEntry


# to input masked text into a text field or area using some offset value -- used for typing passwords or sensitive information
to hiddenTextEntry label, input, offset
	if (offset is not empty) then 		
		click scrollTo(label) + offset 
	else 
		click scrollTo(label)
	end if
	wait 0.5
	TypeText controlKey,"a"
	TypeHiddenText input
	wait 0.3
end hiddenTextEntry


# to select or unselect a checkbox
to checkBox label, offset
	if (offset is not empty) then
		click scrollTo(label) + offset
	else 
		click scrollTo(label)
	end if
	wait 0.5
end checkBox


# to select a value from dropdown list
to dropDown label, input, offset, selectionOffset
	if (offset is not empty) then
		click scrollTo(label) + offset
	else 
		click scrollTo(label) 
	end if 
	wait 2.5
	if (input is not empty) then
		if (selectionOffset is not empty) then
			click scrollTo(input) + selectionOffset
		else 
			click scrollTo(input) 
		end if
	end if
	wait 0.3
end dropDown


# to perform move operation over application
to hoverOn action, validation, offset
	if (action is not empty) then
		if (offset is not empty) then 
			MoveTo scrollTo(action) + offset
		else
			MoveTo scrollTo(action)
		end if
		wait 1
	end if	
	if (validation is not empty) then
		waitForValidation validation
	end if	
end hoverOn


# to perform verify operation over application
to verifyEvent verifyObject, successMsg, errorMsg	
	if file (suiteinfo().imagesFolder&"/"&verifyObject&".png") exists or if folder (suiteinfo().imagesFolder&"/"&verifyObject) exists then
		if ImageFound(image:verifyObject) then Log successMsg else LogError errorMsg
	else
		if ImageFound(text:verifyObject) then Log successMsg else LogError errorMsg
	end if
end verifyEvent


# to perform verify operation over application that is not present
to verifyEventNotPresent verifyObject, successMsg, errorMsg	
	if file (suiteinfo().imagesFolder&"/"&verifyObject&".png") exists or if folder (suiteinfo().imagesFolder&"/"&verifyObject) exists then
		if not ImageFound(image:verifyObject) then Log successMsg else LogError errorMsg
	else
		if not ImageFound(text:verifyObject) then Log successMsg else LogError errorMsg
	end if
end verifyEventNotPresent